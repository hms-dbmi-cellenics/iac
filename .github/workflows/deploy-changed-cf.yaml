name: Deploy changed CloudFormation templates
on:
  workflow_dispatch:
    inputs:
      cluster:
        type: choice
        description: Select environment to deploy to
        options:
        - staging
        - production
        - staging and production
        default: staging
  push:
    branches:
      - master
    paths:
      - 'cf/**.yaml'
      - 'cf/**.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'cf/**.yaml'
      - 'cf/**.yml'
env:
  region: 'eu-west-1'

jobs:
  setup:
    name: Check secrets and set up matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: check-secrets
        name: Check if necessary secrets are installed.
        run: |-
          echo Checking if secrets are defined in the repository.

          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
              echo "This workflow requires AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY defined in this repository secrets to complete."
              echo "The secrets can be set/rotated by running 'rotate-ci' from 'biomage-utils'."
          fi

      - id: set-matrix
        name: Set up cluster matrix
        run: |-
          # Github workflow_dispatch inputs do not use use default value if workflow is not
          # triggered by dispatch. Therefore, we have to manually provide a default value
          CLUSTER=${CLUSTER:-"staging"}

          if [ "${GITHUB_REF}" == "refs/heads/master" ] || [ "${CLUSTER}" = "staging and production" ]; then
            echo '::set-output name=matrix::["staging", "production"]'
          elif [ "${CLUSTER}" = "staging" ]; then
            echo '::set-output name=matrix::["staging"]'
          elif [ "${CLUSTER}" = "production" ]; then
            echo '::set-output name=matrix::["production"]'
          fi
        env:
          CLUSTER: ${{ github.event.inputs.cluster }}
          GITHUB_REF: ${{ github.ref }}

  get-modified-templates:
    name: Fetch paths to modified CloudFormation templates
    runs-on: ubuntu-20.04
    outputs:
      files: ${{ steps.check-number-of-cf-files.outputs.files }}
      num-files: ${{ steps.check-number-of-cf-files.outputs.num-files }}
    steps:
      - id: checkout
        name: Check out current branch source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - id: get-changed-files
        name: Get changed files
        run: |
          echo "[]" > empty.json

          # Get name of changed files
          # and concatenate into a JSON array
          git diff --name-only --diff-filter=ACMRT remotes/origin/master ${{ github.sha }} | xargs -I 'value' jq --arg filename "value" '. |= . + [$filename]' empty.json | jq -s 'add' > ${HOME}/files.json

          echo "All changed files"
          cat ${HOME}/files.json

      - id: check-number-of-cf-files
        name: Check CloudFormation templates
        run: |-
          # Select those that are CF templates (path starts with `cf/`)
          jq '[.[] | select(match("^cf/"))]' ${HOME}/files.json > ${HOME}/cf_files.json

          echo "Changed CF files"
          cat ${HOME}/cf_files.json

          # Set as output the minified JSON.
          echo "::set-output name=files::$(jq -c . < ${HOME}/cf_files.json)"
          echo "$(jq -c . < ${HOME}/cf_files.json)"
          echo "::set-output name=num-files::$(jq '. | length' ${HOME}/cf_files.json)"

  lint-templates:
    name: Lint template files
    runs-on: ubuntu-20.04
    needs: get-modified-templates
    if: needs.get-modified-templates.outputs.num-files > 0
    strategy:
      matrix:
        template: ${{fromJson(needs.get-modified-templates.outputs.files)}}
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: lint
        name: Lint template
        uses: scottbrenner/cfn-lint-action@1.6.1
        with:
          args: ${{ matrix.template }}

  deploy-templates:
    name: Deploy changed CloudFormation template
    runs-on: ubuntu-20.04
    needs: [setup, get-modified-templates, lint-templates]
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    outputs:
      deploy-rds: ${{ steps.set-name.outputs.deploy-rds && github.ref == 'refs/heads/master' }}
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.matrix) }}
        template: ${{fromJson(needs.get-modified-templates.outputs.files)}}
    env:
      CLUSTER_ENV: ${{ matrix.environment }}
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: set-up-creds
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - id: set-name
        name: Set name of the CloudFormation stack
        run: |-
          echo "Ref is $GITHUB_REF"
          BASE_NAME=$(basename $FILE_NAME | sed "s/\..*//")
          STACK_NAME=biomage-$BASE_NAME-$CLUSTER_ENV

          echo "::set-output name=stack-name::$STACK_NAME"

          if [ "$BASE_NAME" == 'rds' ]; then
            echo "::set-output name=deploy-rds::true"
          fi

        env:
          FILE_NAME: ${{ matrix.template }}

      - id: deploy-template
        name: Deploy CloudFormation template
        if: ${{ !contains(matrix.template, 'irsa-') }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          parameter-overrides: "Environment=${{ matrix.environment }}"
          name: ${{ steps.set-name.outputs.stack-name }}
          template: ${{ matrix.template }}
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"

      # The following steps are only necessary for IAM Service Account roles.
      - id: get-oidc
        if: ${{ contains(matrix.template, 'irsa-') }}
        name: Get OIDC provider information for IRSA role
        run: |-
          OIDC_PROVIDER=$(aws eks describe-cluster --name "biomage-$CLUSTER_ENV" --query "cluster.identity.oidc.issuer" --output text | sed -e "s/^https:\/\///")
          echo "::set-output name=oidc-provider::$OIDC_PROVIDER"

      - id: deploy-irsa-template
        if: ${{ contains(matrix.template, 'irsa-') }}
        name: Deploy IRSA CloudFormation template
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          parameter-overrides: "Environment=${{ matrix.environment }},OIDCProvider=${{ steps.get-oidc.outputs.oidc-provider }}"
          name: ${{ steps.set-name.outputs.stack-name }}
          template: ${{ matrix.template }}
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM"

  setup-rds-roles:
    name: Setup RDS roles for default resources
    runs-on: ubuntu-20.04
    needs: deploy-templates
    if: ${{ needs.deploy-templates.outputs.deploy-rds == 'true' }}
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.matrix) }}
    env:
      CLUSTER_ENV: ${{ matrix.environment }}
    steps:
      - id: set-up-creds
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      # This step is needed to change the environment name (e.g. staging) into its uppercase form.
      # This is required because the action that is used in get-rds-secrets store the secret in environment variables,
      # with uppercase letters (see action ref). Therefore, we need the uppercased form of the environment
      # Which is output in .outputs.uppercase of this step.
      - id: setup-rds-env
        name: Uppercase environment name
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ matrix.environment }}

      - id: get-rds-secrets
        name: Export RDS secrets into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.0.0
        with:
          secrets: aurora-${{ matrix.environment }}
          parse-json: true

      - id: check-rds-secrets
        name: Check RDS secrets are fetched
        run: |-
          # These checks if the RDS username and passwords are set
          if [ -z $AURORA_${{ steps.setup-rds-env.outputs.uppercase }}_USERNAME ]; then
            echo "RDS username not provided"
            exit 1
          fi
          if [ -z $AURORA_${{ steps.setup-rds-env.outputs.uppercase }}_PASSWORD ]; then
            echo "RDS password not provided"
            exit 1
          fi

      - id: setup-rds-roles
        name: Setup RDS roles for default RDS instances
        run: |-
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=rds-${CLUSTER_ENV}-ssm-agent" \
            --output text \
            --query 'Reservations[*].Instances[*].InstanceId')
          if [ -z $INSTANCE_ID ]; then
            echo "Can not connect to RDS agent: No instances found for $CLUSTER_ENV"
            exit 1
          fi
          CLUSTER_NAME=aurora-cluster-${CLUSTER_ENV}-default
          RDSHOST=$(aws rds describe-db-cluster-endpoints \
            --region $REGION \
            --db-cluster-identifier $CLUSTER_NAME \
            --filter Name=db-cluster-endpoint-type,Values='writer' \
            --query 'DBClusterEndpoints[0].Endpoint' \
            --output text)
          if [ -z $RDSHOST ]; then
            echo "Failed getting RDS host with name $CLUSTER_NAME"
            exit 1
          fi
          SETUP_ROLES_CMD="
            PGPASSWORD=${AURORA_${{ steps.setup-rds-env.outputs.uppercase }}_PASSWORD} psql \
              --host=${RDSHOST} \
              --port=5432 \
              --username=${AURORA_${{ steps.setup-rds-env.outputs.uppercase }}_USERNAME} \
              --dbname=aurora_db <<EOF
                CREATE ROLE api_role WITH LOGIN;
                CREATE ROLE dev_role WITH LOGIN;
                GRANT USAGE ON SCHEMA public TO api_role;
                GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public to api_role;
                GRANT dev_role TO ${AURORA_${{ steps.setup-rds-env.outputs.uppercase }}_USERNAME};
                ALTER DEFAULT PRIVILEGES FOR USER dev_role IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO api_role;
                ALTER DEFAULT PRIVILEGES FOR USER dev_role IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO api_role;
                REVOKE dev_role FROM ${AURORA_${{ steps.setup-rds-env.outputs.uppercase }}_USERNAME};
                GRANT rds_iam TO api_role;
                GRANT rds_iam, ${AURORA_${{ steps.setup-rds-env.outputs.uppercase }}_USERNAME} TO dev_role;
              EOF"
          aws ssm send-command --instance-ids "$INSTANCE_ID" \
            --document-name AWS-RunShellScript \
            --parameters "commands='$SETUP_ROLES_CMD'"
        env:
          REGION: ${{ env.region }}