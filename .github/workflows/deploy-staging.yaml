name: Deploy a staging environment
on:
  workflow_dispatch:
    inputs:
      manifest:
        description: 'The manifest file to deploy (base64 encoded)'
        required: true
        type: string
      sandbox-id:
        description: 'The sandbox ID to deploy under'
        required: true
        type: string
      with-rds:
        description: 'Stage a new RDS instance'
        required: false
        default: 'False'
        type: string
      secrets:
        description: 'Encrypted secrets to use for this task'
        required: true
        type: string
env:
  region: 'eu-west-1'

jobs:
  deploy-staging:
    name: Deploy staging environment
    runs-on: ubuntu-20.04
    steps:
      - id: setup-aws
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - id: install-aws-cli
        name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - id: decrypt-secrets
        name: Decrypt credentials from user.
        run: |-
            SECRETS="$(aws kms decrypt \
              --key-id arn:aws:kms:${REGION}:${AWS_ACCOUNT_ID}:alias/iac-secret-key \
              --ciphertext-blob fileb://<(echo $CIPHERTEXT | base64 --decode) \
              --output text --query Plaintext)"

            DEPLOYMENT_AWS_ACCESS_KEY_ID="$(echo $SECRETS | base64 --decode | jq -r '.access_key')"
            DEPLOYMENT_AWS_SECRET_ACCESS_KEY="$(echo $SECRETS | base64 --decode | jq -r '.secret_key')"
            DEPLOYMENT_GITHUB_API_TOKEN="$(echo $SECRETS | base64 --decode | jq -r '.github_api_token')"

            echo "::add-mask::$SECRETS"

            echo "::add-mask::$DEPLOYMENT_AWS_ACCESS_KEY_ID"
            echo "::add-mask::$DEPLOYMENT_AWS_SECRET_ACCESS_KEY"
            echo "::add-mask::$DEPLOYMENT_GITHUB_API_TOKEN"

            echo "::set-output name=aws-access-key::$DEPLOYMENT_AWS_ACCESS_KEY_ID"
            echo "::set-output name=aws-secret-access-key::$DEPLOYMENT_AWS_SECRET_ACCESS_KEY"
            echo "::set-output name=github-api-token::$DEPLOYMENT_GITHUB_API_TOKEN"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ steps.setup-aws.outputs.aws-account-id }}
          CIPHERTEXT: ${{ github.event.inputs.secrets }}
          REGION: ${{ env.region }}

      - id: setup-aws-submitted
        name: Configure AWS credentials with submitted details
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.decrypt-secrets.outputs.aws-access-key }}
          aws-secret-access-key: ${{ steps.decrypt-secrets.outputs.aws-secret-access-key }}
          aws-region: ${{ env.region }}

      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.API_TOKEN_GITHUB }}

      - id: setup-aws-privileged
        name: Configure AWS privileged credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - id: get-rds-secrets
        if: ${{ github.event.inputs.with-rds == 'True' }}
        uses: abhilash1in/aws-secrets-manager-action@v2.0.0
        name: Export RDS secrets into environment variables
        with:
          secrets: aurora-staging
          parse-json: true

      - id: check-rds-secrets
        if: ${{ github.event.inputs.with-rds == 'True' }}
        name: Check RDS secrets are fetched
        run: |-
          # These checks if the RDS username and passwords are set
          if [ -z $AURORA_STAGING_USERNAME ]; then
            echo "RDS username not provided"
            exit 1
          fi
          if [ -z $AURORA_STAGING_PASSWORD ]; then
            echo "RDS password not provided"
            exit 1
          fi
      - id: install-eksctl
        name: Install eksctl
        run: |-
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
      - id: set-stack-name
        name: Set name of the CloudFormation stacks
        run: |-
          BASE_NAME=biomage-rds-staging-$SANDBOX_ID
          echo "::set-output name=rds-name::$BASE_NAME"

          BASE_NAME=biomage-sns-staging-$SANDBOX_ID
          echo "::set-output name=sns-name::$BASE_NAME"

          BASE_NAME=biomage-cognito-staging-$SANDBOX_ID
          echo "::set-output name=cognito-name::$BASE_NAME"
        env:
          SANDBOX_ID: ${{ github.event.inputs.sandbox-id }}

      - id: create-worker-fargate-profile
        name: Attempt to create worker Fargate profile
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 900
          max_attempts: 30
          retry_on: error
          command: |
            output=$(eksctl create fargateprofile --cluster biomage-staging --name worker-${SANDBOX_ID} --namespace worker-${SANDBOX_ID} 2>&1)
            echo $output
            echo $output | grep "created Fargate profile"
          # Add jitter to break up correlated events.
          on_retry_command: sleep $((20 + RANDOM % 10));
        env:
          SANDBOX_ID: ${{ github.event.inputs.sandbox-id }}

      - id: create-pipeline-fargate-profile
        name: Attempt to create pipeline Fargate profile
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 900
          max_attempts: 30
          retry_on: error
          command: |
            output=$(eksctl create fargateprofile --cluster biomage-staging --name pipeline-${SANDBOX_ID} --labels type=pipeline --namespace pipeline-${SANDBOX_ID} 2>&1)
            echo $output
            echo $output | grep "created Fargate profile"
          # Add jitter to break up correlated events.
          on_retry_command: sleep $((20 + RANDOM % 10))
        env:
          SANDBOX_ID: ${{ github.event.inputs.sandbox-id }}

      - id: add-manifest-to-repo
        name: Add manifest file to repository.
        run: |-
          echo "$MANIFEST" | base64 -d > ./releases/staging/$SANDBOX_ID.yaml
        env:
          MANIFEST: ${{ github.event.inputs.manifest }}
          SANDBOX_ID: ${{ github.event.inputs.sandbox-id }}

      - id: deploy-template-rds
        if: ${{ github.ref == 'refs/heads/master' && github.event.inputs.with-rds == 'True' }}
        name: Deploy CloudFormation stack for RDS
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          parameter-overrides: "Environment=staging,SandboxID=${{ github.event.inputs.sandbox-id }}"
          name: ${{ steps.set-stack-name.outputs.rds-name }}
          template: cf/rds.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM"

      - id: setup-rds-roles
        if: ${{ github.ref == 'refs/heads/master' && github.event.inputs.with-rds == 'True' }}
        name: Setup RDS roles
        run: |-
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters 'Name=tag:Name,Values=rds-staging-ssm-agent' \
            --output text \
            --query 'Reservations[*].Instances[*].InstanceId')
          if [ -z $INSTANCE_ID ]; then
            echo "Can not connect to RDS agent: No instances found for staging"
            exit 1
          fi

          CLUSTER_NAME=aurora-cluster-staging-${SANDBOX_ID}
          RDSHOST=$(aws rds describe-db-cluster-endpoints \
            --region $REGION \
            --db-cluster-identifier $CLUSTER_NAME \
            --filter Name=db-cluster-endpoint-type,Values='writer' \
            --query 'DBClusterEndpoints[0].Endpoint' \
            --output text)
          if [ -z $RDSHOST ]; then
            echo "Failed getting RDS host with name $CLUSTER_NAME"
            exit 1
          fi

          SETUP_ROLES_CMD="
            PGPASSWORD=${AURORA_STAGING_PASSWORD} psql \
              --host=${RDSHOST} \
              --port=5432 \
              --username=${AURORA_STAGING_USERNAME} \
              --dbname=aurora_db <<EOF
                CREATE ROLE api_role WITH LOGIN;
                CREATE ROLE dev_role WITH LOGIN;
                GRANT USAGE ON SCHEMA public TO api_role;
                GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public to api_role;
                GRANT dev_role TO ${AURORA_STAGING_USERNAME};
                ALTER DEFAULT PRIVILEGES FOR USER dev_role IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO api_role;
                ALTER DEFAULT PRIVILEGES FOR USER dev_role IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO api_role;
                REVOKE dev_role FROM ${AURORA_STAGING_USERNAME};
                GRANT rds_iam TO api_role;
                GRANT rds_iam, ${AURORA_STAGING_USERNAME} TO dev_role;
              EOF"

          aws ssm send-command --instance-ids "$INSTANCE_ID" \
            --document-name AWS-RunShellScript \
            --parameters "commands='$SETUP_ROLES_CMD'"
        env:
          REGION: ${{ env.region }}
          SANDBOX_ID: ${{ github.event.inputs.sandbox-id }}

      - id: deploy-template-sns
        name: Deploy CloudFormation stack for SNS topic
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          parameter-overrides: "Environment=staging,SandboxID=${{ github.event.inputs.sandbox-id }}"
          name: ${{ steps.set-stack-name.outputs.sns-name }}
          template: cf/sns.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM"

      - id: deploy-template-cognito
        name: Deploy CloudFormation stack for Cognito pool clients
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          parameter-overrides: "Environment=staging,SandboxID=${{ github.event.inputs.sandbox-id }}"
          name: ${{ steps.set-stack-name.outputs.cognito-name }}
          template: cf/userpoolclient.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM"

      - id: disable-admin-enforcement
        name: Temporarily disable admin enforcement
        uses: benjefferies/branch-protection-bot@1.0.7
        with:
          access_token: ${{ secrets.API_TOKEN_GITHUB }}
          owner: ${{ github.repository_owner }}
          repo: iac
          enforce_admins: false
          retries: 8

      - id: pull
        name: Pull and allow unrelated histories.
        run: |-
          git pull --allow-unrelated-histories

      - id: push-deployment
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Deploy staging environment ${{ github.event.inputs.sandbox-id }}

      - id: on-failure-retry
        if: failure()
        name: Retry in case push failed.
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 30
          max_attempts: 5
          retry_on: error
          command: git config user.name "GitHub Actions" && git pull --allow-unrelated-histories --no-edit && git push origin master
          # Add jitter to break up correlated events.
          on_retry_command: sleep $((5 + RANDOM % 10))

      - id: enable-admin-enforcement
        name: Re-enable admin enforcement
        uses: benjefferies/branch-protection-bot@1.0.7
        if: always()
        with:
          access_token: ${{ secrets.API_TOKEN_GITHUB }}
          owner: ${{ github.repository_owner }}
          repo: iac
          enforce_admins: true
          retries: 8

      - id: install-fluxctl
        name: Install fluxctl
        run: |-
          sudo snap install fluxctl --classic

      - id: add-kubeconfig
        name: Add k8s config file for existing cluster.
        run: |-
          aws eks update-kubeconfig --name biomage-staging

      - id: update-flux-namespace
        name: Update flux staging
        run: |-
          fluxctl sync --k8s-fwd-ns flux --context arn:aws:eks:${{ env.region }}:${{ steps.setup-aws.outputs.aws-account-id }}:cluster/biomage-staging

      - id: cleanup-pipeline-fargate-profile-if-failure
        name: Remove Fargate profile for the pipelines
        if: ${{ failure() }}
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 900
          max_attempts: 30
          retry_on: error
          command: |
            output=$(eksctl delete fargateprofile --cluster biomage-staging --name pipeline-${SANDBOX_ID} 2>&1)
            echo $output
            echo $output | egrep "deleted Fargate profile|No Fargate Profile found"
          # Add jitter to break up correlated events.
          on_retry_command: sleep $((20 + RANDOM % 10));
        env:
          SANDBOX_ID: ${{ github.event.inputs.sandbox-id }}

      - id: cleanup-worker-fargate-profile-if-failure
        name: Remove Fargate profile for the workers
        if: ${{ failure() }}
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 900
          max_attempts: 30
          retry_on: error
          command: |
            output=$(eksctl delete fargateprofile --cluster biomage-staging --name worker-${SANDBOX_ID} 2>&1)
            echo $output
            echo $output | egrep "deleted Fargate profile|No Fargate Profile found"
          # Add jitter to break up correlated events.
          on_retry_command: sleep $((20 + RANDOM % 10));
        env:
          SANDBOX_ID: ${{ github.event.inputs.sandbox-id }}
