AWSTemplateFormatVersion: "2010-09-09"
Description: Setting up a lambda function to handle user invites for non-existing users

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: The environment for which the tables need to be created.
  UsingSelfSignedCert:
    Type: String
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
    Description: Determine whether lambda should ignore SSL certificate or not.

Conditions:
  isUsingSelfSignedCert: !Equals [ !Ref UsingSelfSignedCert, "true" ]

Outputs:
  PostRegisterLambdaArn:
    Description: ARN of PostRegisterLambda
    Value: !GetAtt PostRegisterLambda.Arn
    Export:
      Name: !Sub PostRegisterLambdaArn-${Environment}

Resources:
  PostRegisterLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "can-create-required-vpc-access-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:AssignPrivateIpAddresses"
                  - "ec2:UnassignPrivateIpAddresses"
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: !Sub "can-describe-network-interfaces-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeNetworkInterfaces"
                Resource:
                  - "*"
        - PolicyName: !Sub "can-create-log-group-in-cloudwatch-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: !Sub "can-add-logs-in-cloudwatch-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/biomage-post-register-lambda-*"
        - PolicyName: !Sub "can-post-to-post-registration-sns-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - Fn::Sub: "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:post-registration-user-access-${Environment}-default"

  PostRegisterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Role: !GetAtt PostRegisterLambdaRole.Arn
      Handler: index.handler
      VpcConfig:
        SecurityGroupIds:
          Fn::Split: [",", Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::ClusterSecurityGroupId"]
        SubnetIds:
          Fn::Split: [",", Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::SubnetsPrivate"]
      Environment:
        Variables:
          CLUSTER_ENV: !Sub "${Environment}"
          NODE_TLS_REJECT_UNAUTHORIZED: !If [ isUsingSelfSignedCert, "0", "1"]
          DOMAIN_NAME:
            Fn::ImportValue: !Sub "DomainName-${Environment}"
      Code:
        ZipFile: |
          const clusterEnv = process.env.CLUSTER_ENV;
          const domainName = process.env.DOMAIN_NAME;

          const addUserPermission = async (userEmail, userId) => {
            const apiSubUrl = clusterEnv == "production" ? "api" : "api-default"
            const endpoint = `https://${apiSubUrl}.${domainName}/v2/access/post-registration`

            const message = {
              userEmail,
              userId
            };

            await fetch(endpoint, {
              method: "POST",
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify(message)
            })
          }

          exports.handler = async (event) => {

            const {
              email: userEmail,
              sub: userId,
            } = event.request.userAttributes;

            console.log(`== Handling post-registration for ${userEmail} ==`)

            await addUserPermission(userEmail, userId);

            console.log(`== Successfully added user ${userEmail} ==`)

            return event;
          };

  LoggingGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref PostRegisterLambda]]
      RetentionInDays: 5
