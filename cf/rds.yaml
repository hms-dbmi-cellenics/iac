AWSTemplateFormatVersion: "2010-09-09"
# CF transform required to inject lamba required for secret rotation
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-secretsmanager.html
Transform: AWS::SecretsManager-2020-07-23
Description: Set up RDS Aurora cluster [managed by github.com/hms-dbmi-cellenics/iac]

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: The environment for which the cluster needs to be created.
  SandboxID:
    Type: String
    Default: default
    Description: The sandbox ID of the environment that this cluster is created for.
  DBInstanceType:
    Type: String
    Default: db.t4g.medium
    Description: The instance type for the database.

# --------------------------------------- Constants ---------------------------------------
  DBPort:
    Type: String
    Default: "5432"

  DBEngineVersion:
    Type: Number
    Default: 13.4

  DBSecretPrefix:
    Description: The prefix of the secret used to store master user and password,
      the missing suffix is the environment (and both are connected with -).
    Type: String
    Default: aurora

# --------------------------------------- Conditions ---------------------------------------

Conditions:
  SandboxIdIsDefault: !Equals
    - !Ref SandboxID
    - default

Resources:
  RDSMasterUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: |-
        RDS master secret. Refrain from using this secret as it breaks the IAM
        permission model that we have implemented to access the RDS. You should use
        dev_role to access the RDS - it has the same permissions as the db root user.
      Name: !If [SandboxIdIsDefault,
        !Sub "${DBSecretPrefix}-${Environment}",
        !Sub "${DBSecretPrefix}-${Environment}-${SandboxID}"
      ]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: "/@\"'\\"

  RDSInvokeLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "rds-can-invoke-lambda-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:delete-sample-file-lambda-${Environment}"

  RDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSMasterUserSecret
      TargetId: !Ref DBInstance1
      TargetType: AWS::RDS::DBInstance

  RDSSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: RDSInstanceAttachment
    Properties:
      SecretId: !Ref RDSMasterUserSecret
      HostedRotationLambda:
        # AWS provided Lambda to rotate single user for PostgreSQL
        # https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_available-rotation-templates.html#sar-template-postgre-singleuser
        # This lambda will be injected into the stack. Injection requires AWS transform defined above.
        RotationType: PostgreSQLSingleUser
        RotationLambdaName: !If [SandboxIdIsDefault,
          !Sub "RDSSecretsManagerRotation${Environment}",
          !Sub "RDSSecretsManagerRotation${Environment}-${SandboxID}"
        ]
        VpcSubnetIds:
          Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::SubnetsPrivate"
        VpcSecurityGroupIds:
          Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::ClusterSecurityGroupId"
      RotationRules:
        Duration: 2h
        ScheduleExpression: 'cron(0 8 1 * ? *)'

  DBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      AssociatedRoles:
        - FeatureName: Lambda
          RoleArn: !GetAtt RDSInvokeLambdaRole.Arn
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: !Ref DBEngineVersion
      DBSubnetGroupName:
        Fn::ImportValue:
          !Sub "biomage-${Environment}-rds::DBSubnetGroup"
      DBClusterIdentifier: !Join [ "-", ["aurora-cluster", !Ref Environment, !Ref SandboxID] ]
      DatabaseName: "aurora_db"
      Port: !Ref DBPort
      DeletionProtection: !If [SandboxIdIsDefault, true, false]
      MasterUsername: !Sub "{{resolve:secretsmanager:${RDSMasterUserSecret}::username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${RDSMasterUserSecret}::password}}"
      EnableIAMDatabaseAuthentication: true
      BackupRetentionPeriod: 5
      SourceRegion: !Sub '${AWS::Region}'
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - Fn::ImportValue:
            !Sub "biomage-${Environment}-rds::RDSSecurityGroup"

  DBInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DBInstanceType
      DBClusterIdentifier: !Ref DBCluster
      Engine: aurora-postgresql
      AutoMinorVersionUpgrade: true
      PubliclyAccessible: false
