AWSTemplateFormatVersion: "2010-09-09"
Description: Set up SNS topics for Biomage SCP [managed by github.com/hms-dbmi-cellenics/iac]

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - staging
      - production
      - development
    Description: The environment for which the SNS topic needs to be created.
  SandboxID:
    Type: String
    Default: default
    Description: The sandbox ID of the environment that this stack is created for.

Conditions:
  isProd: !Equals [!Ref Environment, "production"]
  isStaging: !Equals [!Ref Environment, "staging"]

Resources:
  UserPoolClientCluster:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "biomage-cellscope-cluster-${SandboxID}"
      AllowedOAuthFlowsUserPoolClient: true
      UserPoolId:
        Fn::ImportValue: !Sub "biomage-user-pool-case-insensitive-${Environment}::UserPoolId"
      CallbackURLs:
        - !Sub ["${BaseUrl}/data-management", BaseUrl:
            !If [ isProd,
              !Sub ["https://${DomainName}", DomainName: !Join ["", [ Fn::ImportValue: !Sub "DomainName-${Environment}" ]]],
              !Sub ["https://ui-${SandboxID}.${DomainName}", DomainName: !Join ["", [ Fn::ImportValue: !Sub "DomainName-${Environment}" ]]]
          ],
        ]
        - !If [ isStaging, "http://localhost:5000/data-management", !Ref "AWS::NoValue"]

      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'phone'
        - 'email'
        - 'openid'
        - 'aws.cognito.signin.user.admin'
        - 'profile'
      DefaultRedirectURI: !Sub ["${BaseUrl}/data-management", BaseUrl:
            !If [ isProd,
              !Sub ["https://${DomainName}", DomainName: !Join ["", [ Fn::ImportValue: !Sub "DomainName-${Environment}" ]]],
              !Sub ["https://ui-${SandboxID}.${DomainName}", DomainName: !Join ["", [ Fn::ImportValue: !Sub "DomainName-${Environment}" ]]]
          ]]

      LogoutURLs:
          - !Sub ["${BaseUrl}/data-management", BaseUrl:
            !If [ isProd,
              !Sub ["https://${DomainName}", DomainName: !Join ["", [ Fn::ImportValue: !Sub "DomainName-${Environment}" ]]],
              !Sub ["https://ui-${SandboxID}.${DomainName}", DomainName: !Join ["", [ Fn::ImportValue: !Sub "DomainName-${Environment}" ]]]
          ]]
          - !If [ isStaging, "http://localhost:5000/data-management", !Ref "AWS::NoValue"]

      SupportedIdentityProviders:
        - COGNITO

  FileUploadIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "file-upload-identity-pool-${Environment}-${SandboxID}"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClientCluster
          ProviderName:
            Fn::ImportValue: !Sub "biomage-user-pool-case-insensitive-${Environment}::UserPoolProviderName"

  # TODO: this will have to be refactored once authentication is done.
  # this will have to work with attribute-based access control or role-based
  # access control so we can limit the user to only upload to certain folders
  # on S3 depending on their instutiton/name/etc.
  #
  # see https://docs.aws.amazon.com/cognito/latest/developerguide/attributes-for-access-control.html
  # and https://docs.aws.amazon.com/cognito/latest/developerguide/role-based-access-control.html
  FileUploadIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref FileUploadIdentityPool
      Roles:
        "authenticated":
          Fn::ImportValue: !Sub "biomage-user-pool-case-insensitive-${Environment}::UIRoleArn"
